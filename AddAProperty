A単adir una propiedad:

Tendremos que a単adir una nueva propiedad boolean que indica si es economico (true) o no
lo es (false), la a単adimos al modelo de Restaurant:
economic: {
type: DataTypes.BOOLEAN,
defaultValue: false
},
y al create Restaurant
economic: {
type: Sequelize.BOOLEAN,
defaultValue: false
}

ProductController
const updateEconomicRestaurants = async function (RestaurantId) {
const AvgPriceOtherRestaurants = Product.findAll({
where: { restaurantId: { [Sequelize.Op.ne]: RestaurantId }},
attributes: [
[Sequelize.fn('AVG', Sequelize.col('price')), 'avgPrice']
]
})

const AvgPriceMyRestaurant = Product.findOne({
where: {restaurantId: RestaurantId},
attributes: [
[Sequelize.fn('AVG', Sequelize.col('price')), 'avgPrice']
]
})

const restaurant = await Restaurant.findByPk(RestaurantId)
if (AvgPriceMyRestaurant !== null && AvgPriceOtherRestaurants !==
null) {
const finalValue = AvgPriceMyRestaurant.avgPrice <
AvgPriceOtherRestaurants.avgPrice
restaurant.economic = finalValue
}
await restaurant.save()
}

Y como dice en el enunciado crear, la a単adimos al create:
const create = async function (req, res) {
let newProduct = Product.build(req.body)
try {
newProduct = await newProduct.save()
updateEconomicRestaurants(newProduct.restaurantId)
res.json(newProduct)
} catch (err) {
res.status(500).send(err)
}
}
