Aqui añadimos las funciones
EJEMPLOS

const updateEconomicRestaurants = async function (RestaurantId) {
	const AvgPriceOtherRestaurants = Product.findAll({
		where: { restaurantId: { [Sequelize.Op.ne]: RestaurantId }},
		attributes: [
		[Sequelize.fn('AVG', Sequelize.col('price')), 'avgPrice']
		]
})

const AvgPriceMyRestaurant = Product.findOne({
	where: {restaurantId: RestaurantId},
	attributes: [
	[Sequelize.fn('AVG', Sequelize.col('price')), 'avgPrice']
	]
})

const restaurant = await Restaurant.findByPk(RestaurantId)
	if (AvgPriceMyRestaurant !== null && AvgPriceOtherRestaurants !==
	null) {
	const finalValue = AvgPriceMyRestaurant.avgPrice <
	AvgPriceOtherRestaurants.avgPrice
	restaurant.economic = finalValue
}
await restaurant.save()
}

const pinnedRestaurant = async function (req, res) {
  try {
    const restaurantToBeToggled = await Restaurant.findByPk(req.params)
    if (restaurantToBeToggled.pinnedAt) {
      restaurantToBeToggled.pinnedAt = null
    } else {
      restaurantToBeToggled.pinnedAt = new Date()
    }
    await restaurantToBeToggled.save()
    res.json(restaurantToBeToggled)
  } catch (err) {
    res.status(500).send(err)
  }
}

// CONTROLLERS
const newOrder = Order.build(req.body) -> Se construye un objeto Order con los datos enviados (req.body) pero aun no se guarda en la base de datos

const restaurant = await Restaurant.findByPk(req.body.restaurantId) -> Se busca el restaurant relacionado con la orden usando su id

const orders = await Order.findAl(     -> Se busca todas las ordenes en la base de datos
	{
	where: { userId: req.user.id }    -> Se filtran por userId
	include: [
{
	model: Product,
	as: ‘products’    -> Incluye información de los productos
}],
order: [[‘createdAt’, ‘DESC’]] -> Orden en función de fecha de creación y descendente 
}
)




// CREATE
const create = async function (req, res) {
  const newRestaurant = Restaurant.build(req.body)
  newRestaurant.userId = req.user.id // usuario actualmente autenticado
  try {
    const restaurant = await newRestaurant.save()
    res.json(restaurant)
  } catch (err) {
    res.status(500).send(err)
  }
}

// UPDATE
const update = async function (req, res) {
  try {
    await Restaurant.update(req.body, { where: { id: req.params.restaurantId } })
    const updatedRestaurant = await Restaurant.findByPk(req.params.restaurantId)
    res.json(updatedRestaurant)
  } catch (err) {
    res.status(500).send(err)
  }
}

// DELETE
const destroy = async function (req, res) {
  try {
    const result = await Order.destroy({ where: { id: req.params.orderId } })
    let message = ''
    if (result === 1) {
      message = 'Succesfully delated order' + req.params.orderId
    } else {
      message = 'Could not delate order'
    } res.json(message)
  } catch (err) {
    res.status(500).send(err)
  }

