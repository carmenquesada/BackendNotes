Aqui añadimos los checks de la nueva propiedad creada
Creamos las funciones y las añadimos al create y update 
Creo la funcion
const checkOnly5HighlightedProducts = async (value, { req }) => {
try {
const products = Product.count({ where: { restaurantId:
req.body.restaurantId, isHighlight: true } })
if (products >= 5) {
return Promise.reject(new Error('Maximum number of highlighted
products is 5.'))
} else {
return Promise.resolve('OK')
}
} catch (err) {
return Promise.reject(new Error(err))
}
}

Y añado aqui la funcion
const create = [
  check('name').exists().isString().isLength({ min: 1, max: 255 }).trim(),
  check('description').optional({ nullable: true, checkFalsy: true }).isString().trim(),
  check('address').exists().isString().isLength({ min: 1, max: 255 }).trim(),
  check('postalCode').exists().isString().isLength({ min: 1, max: 255 }),
  check('url').optional({ nullable: true, checkFalsy: true }).isString().isURL().trim(),
  check('shippingCosts').exists().isFloat({ min: 0 }).toFloat(),
  check('email').optional({ nullable: true, checkFalsy: true }).isString().isEmail().trim(),
  check('phone').optional({ nullable: true, checkFalsy: true }).isString().isLength({ min: 1, max: 255 }).trim(),
  check('restaurantCategoryId').exists({ checkNull: true }).isInt({ min: 1 }).toInt(),
  check('userId').not().exists(),
  // TODO: check pinned
  check('pinned').optional({ nullable: true, checkFalsy: true }).isBoolean(),
  check('heroImage').custom((value, { req }) => {
    return checkFileIsImage(req, 'heroImage')
  }).withMessage('Please upload an image with format (jpeg, png).'),
  check('heroImage').custom((value, { req }) => {
    return checkFileMaxSize(req, 'heroImage', maxFileSize)
  }).withMessage('Maximum file size of ' + maxFileSize / 1000000 + 'MB'),
  check('logo').custom((value, { req }) => {
    return checkFileIsImage(req, 'logo')
  }).withMessage('Please upload an image with format (jpeg, png).'),
  check('logo').custom((value, { req }) => {
    return checkFileMaxSize(req, 'logo', maxFileSize)
  }).withMessage('Maximum file size of ' + maxFileSize / 1000000 + 'MB')
]

// 1. Check that restaurantId is present in the body and corresponds to an existing restaurant
const checkRestaurantIdInBody = async(value, {req}) =>{
    try {
        const restaurantId = req.body.restaurantId  -> Obtiene el restaurante
        if (!restaurantId) {
          throw new Error('The restaurantId is not present in the request body.')
        }
        const restaurant = await Restaurant.findByPk(restaurantId)  -> Lo busca en la base
        if (!restaurant) {
          throw new Error('The restaurantId does not correspond to an existing restaurant.')
        }
      } catch (err) {
        throw new Error(err.message)
      }
    }

// 3. Check that products are available
const checkProductsAvailable = async(value, {req}) =>{
    try {
        for (const product of value) {  -> Recorre los productos recibidos (value es la lista de productos)
          const prod = await Product.findByPk(product.productId)
          if (prod.availability < 1) {
            throw new Error('The availability of each product has to be greater than 0 ')
          }
        }
      } catch (err) {
        throw new Error(err.message)
      }
    }

// 2. Check that products is a non-empty array composed of objects with productId and quantity greater than 0
const checkProductNotEmpty = async (value, { req }) => {
  try {
    if (req.body.products.length < 1) { // Se verifica si products es un array vacio
      throw new Error('The array of products is empty.')
    }
  } catch (err) {
    throw new Error(err.message)
  }
}

const checkProductsId = async (value, { req }) => {
  try {
    for (const product of value) { // Se recorre el array value 
      const prod = await Product.findByPk(product.productId) // Se busca en la base de datos el producto con el productId correspondiente
      if (prod.productId < 1) { // Si el productId del producto encontrado es menos que 1
        throw new Error('The id of each product has to be greater than 0 ')
      }
    }
  } catch (err) {
    throw new Error(err.message)
  }
}

// 4. Check that all the products belong to the same restaurant
const allBelongToSame = async (value, { req }) => {
  try {
    const orderRestaurantId = req.body.restaurantId // Se extrae restaurantId de la solicitud
    for (const product of value) { // Se recorre value
      const prod = await Product.findByPk(product.productId) // Se busca en la base de datos el product con productId correspondiente
      if (prod.restaurantId !== orderRestaurantId) {
        throw new Error('Restaurant dont belong to same')
      }
    }
  } catch (err) {
    throw new Error(err.message)
  }
}

const create = [
  check('address').exists().isString().isLength({ min: 1, max: 255 }).trim(),
  check('restaurantId').exists().isInt({ min: 1 }).toInt(),
  check('products.*.quantity').isInt({ min: 1 }).toInt(),
  check('restaurantId').custom(checkRestaurantIdInBody),
  check('products').custom(checkProductNotEmpty),
  check('products').custom(checkProductsId),
  check('products').custom(checkProductsAvailable),
  check('products').custom(allBelongToSame)
]

const noMoreThan1000Calories = async (grasas, proteinas, carbohidratos)
=> {
if (parseFloat(grasas) * 9 + parseFloat(proteinas) * 4 +
parseFloat(carbohidratos) * 4 > 1000.0) {
return Promise.reject(new Error('The sum of 1000 calories cannot
exceed 1000.'))
} else {
return Promise.resolve()
}
}

const check100grams = async (grasas, proteinas, carbohidratos) => {
if (parseFloat(grasas) + parseFloat(proteinas) +
parseFloat(carbohidratos) !== 100.0) {
return Promise.reject(new Error('The sum of 100 grams cannot exceed
100.'))
} else {
return Promise.resolve()
}



