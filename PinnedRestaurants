// RestaurantModel
pinnedAt: {
allowNull: true,
type: DataTypes.DATE
},

// RestaurantMigration
pinnedAt: {
allowNull: true,
type: Sequelize.DATE
},

// RestaurantRoutes
app.route('/restaurants/:restaurantId/togglePinned')
.patch(
isLoggedIn, //Should return 401 if not logged in
hasRole('owner'),//Should return 403 when logged in as a customer
checkEntityExists(Restaurant, 'restaurantId'), // Should return
403 when trying to pin a restaurant that is not yours
RestaurantMiddleware.checkRestaurantOwnership,
)

// RestaurantController
const togglePinned = async function (req, res) {
try {
const restaurant = await Restaurant.findByPk(req.params.restaurantId)
await Restaurant.update(
{ pinnedAt: restaurant.pinnedAt ? null : new Date() },
{ where: { id: restaurant.id } }
)
const updatedRestaurant = await
Restaurant.findByPk(req.params.restaurantId)
res.json(updatedRestaurant)
} catch (err) {
res.status(500).send(err)
}
}

const indexOwner = async function (req, res) {
  try {
    const restaurants = await Restaurant.findAll(
      {
        attributes: { exclude: ['userId'] },
        where: { userId: req.user.id },
        include: [{
          model: RestaurantCategory,
          as: 'restaurantCategory'
        }],
        // This is what we have to add to order by descent order:
        order: [['pinnedAt', 'DESC']]
      })
    res.json(restaurants)
  } catch (err) {
    res.status(500).send(err)
  }
}
